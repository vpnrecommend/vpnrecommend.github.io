<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnrecommend.github.io/news/article-101345.htm" />
    <!-- Title of The Page -->
    <title>通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型</title>
        <meta name="description" content="本文基于 OpenJDK 11 以上的版本  最近爆肝了这系列文章全网最硬核 Java 新内存模型解析与实验，从底层硬件，往上全面解析了 Java 内存模型设计，并给每个结论都配有了相关的参考的论文以" />
        <link rel="icon" href="/assets/website/img/clashxray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN推荐 免费节点订阅中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnrecommend.github.io/news/article-101345.htm" />
    <meta property="og:site_name" content="VPN推荐 免费节点订阅中文网" />
    <meta property="og:title" content="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型" />
    <meta property="og:image" content="https://vpnrecommend.github.io/uploads/20240912/90b51e6ce4846d4dc2219286c26fbc41.webp" />
        <meta property="og:release_date" content="2025-04-22T08:22:29" />
    <meta property="og:updated_time" content="2025-04-22T08:22:29" />
        <meta property="og:description" content="本文基于 OpenJDK 11 以上的版本  最近爆肝了这系列文章全网最硬核 Java 新内存模型解析与实验，从底层硬件，往上全面解析了 Java 内存模型设计，并给每个结论都配有了相关的参考的论文以" />
        
    <!-- Meta Informations -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Web Font -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/webfont.css">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/bootstrap.min.css">
    <!-- Bootstrap-Theme CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/bootstrap-theme.min.css">
    <!-- Fontawesome CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/fontawesome.min.css">
    <!-- Slick CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/slicknav.min.css">
    <!-- Animate CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/animate.min.css">
    <!-- Magnific-Popup CSS-->
    <link rel="stylesheet" href="/assets/website/css/clashxray/magnific-popup.css">
    <!-- Animate-Text CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/animate-text.css">
    <!-- Carousel CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/owl.carousel.min.css">
    <!-- Them Default CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/owl.theme.default.min.css">
    <!-- Normalize CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/normalize.css">
    <!-- Style CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/style.css">
    <!-- Responsive CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/responsive.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KNV2FFXM7E"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KNV2FFXM7E');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader -->
    <div class="preeloader">
        <div class="preloader-spinner"></div>
    </div>
    <!-- End Preloader -->
    <div id="particles-js"><canvas class="particles-js-canvas-el" width="1474" height="880" style="width: 100%; height: 100%;"></canvas></div>
    <!-- Header Area -->
    <header class="header">
        <!-- Middle Header -->
        <div class="middle-header">
            <div class="container">
                <div class="row">
                    <div class="col-md-3 col-sm-3 col-xs-12">
                        <!-- Logo -->
                        <div class="logo">
                            <a href="/">
                                                        <span>VPN推荐</span>
                                                        </a>
                        </div>
                        <!--/ End Logo -->
                        <div class="mobile-nav"></div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Middle Header -->
        <!-- Header Inner -->
        <div class="main-menu">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <nav class="navbar navbar-default">
                            <div class="collapse navbar-collapse">
                                <ul id="nav" class="nav mobile-menu navbar-nav">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                    </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <!--/ End Header Inner -->
    </header>
    <!-- End Header Area -->
    <!-- Breadcrumbs -->
    <div class="breadcrumbs overlay">
        <div class="container">
            <div class="row">
                <div class="bread-inner">
                    <div class="col-xs-12">
                        <h1 class="col-xs-8">通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型</h1>
                        <ul class="bread-list">
                            <li><a href="/">首页<i class="fas fa-chevron-right"></i></a></li>
                            <li><a href="/news/">新闻资讯<i class="fas fa-chevron-right"></i></a></li>
                            <li class="active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumbs -->
    <!-- About Us -->
    <section class="about section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail">
                      				  				  				<blockquote> <p><span style="font-size: 1em;">本文基于 OpenJDK 11 以上的版本</span></p> </blockquote> <p>最近爆肝了这系列文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a>，从底层硬件，往上全面解析了 Java 内存模型设计，并给每个结论都配有了相关的参考的论文以及验证程序，<strong>我发现多年来对于 Java 内存模型有很多误解，并且我发现很多很多人都存在这样的误解</strong>，所以这次通过不断优化一个经典的 DCL （Double Check Locking）程序实例来帮助大家消除这个误解。</p> <p>首先有这样一个程序, 我们想实现一个单例值，只有第一次调用的时候初始化，并且有多线程会访问这个单例值，那么我们会有：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0fb35f0b5627417b8f5368c04e09bae3.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>getValue 的实现就是经典的 DCL 写法。</p> <p>在 Java 内存模型的限制下，这个 ValueHolder 有两个潜在的问题：</p> <ol> <li>如果根据 Java 内存模型的定义，不考虑实际 JVM 的实现，那么 getValue 是有可能返回 null 的。</li> <li>可能读取到没有初始化完成的 Value 的字段值。</li> </ol> <p>下面我们就这两个问题进行进一步分析并优化。</p> <h2 id="根据-java-内存模型的定义不考虑实际-jvm-的实现getvalue-有可能返回-null-的原因">根据 Java 内存模型的定义，不考虑实际 JVM 的实现，getValue 有可能返回 null 的原因</h2> <p>在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a> 文章的<strong>7.1. Coherence（相干性，连贯性）与 Opaque</strong>中我们提到过：假设某个对象字段 int x 初始为 0，一个线程执行：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/50acf0b5828ff5ac866513b35f30ccbc.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 另一个线程执行(r1, r2 为本地变量)：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b42fa4c8f7c55d44092244e21c8b6f91.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>那么这个实际上是两次对于字段的读取（对应字节码 getfield），在 Java 内存模型下，可能的结果是包括：</p> <ol> <li><code>r1 = 1, r2 = 1</code></li> <li><code>r1 = 0, r2 = 1</code></li> <li><code>r1 = 1, r2 = 0</code></li> <li><code>r1 = 0, r2 = 0</code></li> </ol> <p>其中第三个结果很有意思，从程序上理解即我们先看到了 x = 1，之后又看到了 x 变成了 0.实际上这是因为<strong>编译器乱序</strong>。如果我们不想看到这个第三种结果，我们所需要的特性即 coherence。<strong>这里由于<code>private Value value</code>是普通的字段，所以根据 Java 内存模型来看并不保证 coherence</strong>。</p> <p>回到我们的程序，我们有三次对字段读取（对应字节码 getfield），分别位于:<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e54b544f53b8c12bfeaa74d5fb319d18.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>由于 1，2 之间有明显的分支关系（2 根据 1 的结果而执行或者不执行），所以无论在什么编译器看来，都要先执行 1 然后执行 2。但是对于 1 和 3，他们之间并没有这种依赖关系，<strong>在一些简单的编译器看来，他们是可以乱序执行的。在 Java 内存模型下，也没有限制 1 与 3 之间是否必须不能乱序。所以，可能你的程序先执行 3 的读取，然后执行 1 的读取以及其他逻辑，最后方法返回 3 读取的结果</strong>。</p> <p>但是，<strong>在 OpenJDK Hotspot 的相关编译器环境下，这个是被避免了的</strong>。OpenJDK Hotspot 编译器是比较严谨的编译器，它产生的 1 和 3 的两次读取（针对同一个字段的两次读取）也是两次互相依赖的读取，<strong>在编译器维度是不会有乱序的</strong>（注意这里说的是编译器维度哈，不是说这里会有内存屏障连可能的 CPU 乱序也避免了，不过这里针对同一个字段读取，前面已经说了仅和编译器乱序有关，和 CPU 乱序无关）</p> <p>不过，这个仅仅是针对一般程序的写法，我们可以通过一些奇怪的写法骗过编译器，让他任务两次读取没有关系，例如在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a> 文章的<strong>7.1. Coherence（相干性，连贯性）与 Opaque</strong>中的实验环节，<strong>OpenJDK Hotspot 对于下面的程序是没有编译器乱序的</strong>：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dfe5b098e3fe9ed0e7953cd00717a340.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 但是如果你换成下面这种写法，就骗过了编译器：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/066d7ae514e06b3cb1b8ceb0e400a2f3.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 我们不用太深究其原理，直接看其中一个结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7a68fc399a2344b0b0bb57b4f358d60e.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /><strong>对于 DCL 这种写法，我们也是可以骗过编译器的，但是一般我们不会这么写，这里就不赘述了</strong>。</p> <h2 id="可能读取到没有初始化完成的-value-的字段值">可能读取到没有初始化完成的 Value 的字段值</h2> <p>这个就不只是编译器乱序了，还涉及了 CPU 指令乱序以及 CPU 缓存乱序，需要内存屏障解决可见性问题。</p> <p>我们从 Value 类的构造器入手：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6c534b0623ea917d728324eedb7f3285.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 对于<code>value = new Value(10);</code> 这一步，将代码分解为更详细易于理解的伪代码则是：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0852617101d462330fa93bf001445385.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 这中间没有任何内存屏障，根据语义分析，1 与 5 之间有依赖关系，因为 5 依赖于 1 的结果，必须先执行 1 再执行 5。 2 与 3 之间也是有依赖关系的，因为 3 依赖 2 的结果。但是，2和3，与 4，以及 5 这三个之间没有依赖关系，是可以乱序的。我们使用使用代码测试下这个乱序：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7ec30d262fa359a4c5ef55c0d3821cbd.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>虽然在注释中写出了这么编写代码的原因，但是这里还是想强调下这么写的原因：</p> <ol> <li>jcstress 的 @Actor 是使用一个线程执行这个方法中的代码，在测试中，每次会用不同的 JVM 启动参数让这段代码解释执行，C1编译执行，C2编译执行，同时对于 JIT 编译还会修改编译参数让它的编译代码效果不一样。<strong>这样我们就可以看到在不同的执行方式下是否会有不同的编译器乱序效果</strong>。</li> <li>jcstress 的 @Actor 是使用一个线程执行这个方法中的代码，在每次使用不同的 JVM 测试启动时，会将这个 @Actor 绑定到一个 CPU 执行，这样保证在测试的过程中，<strong>这个方法只会在这个 CPU 上执行， CPU 缓存由这个方法的代码独占，这样才能更容易的测试出 CPU 缓存不一致导致的乱序</strong>。<strong>所以，我们的 @Actor 注解方法的数量需要小于 CPU 个数</strong>。</li> <li>我们测试机这里只有两个 CPU，那么只能有两个线程，如果都执行原始代码的话，那么很可能都执行到 synchronized 同步块等待，synchronized 本身有内存屏障的作用（后面会提到）。为了更容易测试出没有走 synchronized 同步块的情况，我们第二个 @Actor 注解的方法直接去掉同步块逻辑，并且如果 value 为 null，我们就设置结果都是 -1 用来区分</li> </ol> <p>我分别在<strong>x86</strong> 和<strong>arm</strong> CPU 上测试了这个程序，结果分别是：</p> <p><strong>x86 - AMD64</strong>：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/45ddaac49b0ddce6ecb298abce0f6e68.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p><strong>arm - aarch64</strong>:</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/994bb1c53b02d885d2cfa7e265c90132.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>我们可以看到，<strong>在比较强一致性的 CPU 如 x86 中，是没有看到未初始化的字段值的，但是在 arm 这种弱一致性的 CPU 上面，我们就看到了未初始化的值</strong>。在我的另一个系列 -<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a>中，我们也多次提到了这个 CPU 乱序表格：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5d35e34f681461f3cbedeb7a9582ad8d.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>在这里，<strong>我们需要的内存屏障是 StoreStore</strong>（同时我们也从上面的表格看出，x86 天生不需要 StoreStore，只要没有编译器乱序的话，CPU 层面是不会乱序的，而 arm 需要内存屏障保证 Store 与 Store 不会乱序），<strong>只要这个内存屏障</strong>保证我们前面伪代码中第 2,3 步在第 5 步前，第 4 步在第 5 步之前即可，那么我们可以怎么做呢？参考我的那篇<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a>中各种内存屏障对应关系，我们可以有如下做法，每种做法我们都会对比其内存屏障消耗：</p> <h2 id="1使用-final"><strong>1.使用 final</strong></h2> <p>final 是在赋值语句末尾添加 StoreStore 内存屏障，所以我们只需要在第 2,3 步以及第 4 步末尾添加 StoreStore 内存屏障<strong>即把 a2 和 b 设置成 final 即可</strong>，如下所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2e0dbd599dc74dd2d7be389fa95d4851.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>对应伪代码：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/045a2306c6eba13a4eb2500028e42a71.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>我们测试下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a7086fe2078596b2d95d97eef52b42a0.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>这次在 arm 上的结果是：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/060d48782e1fa22f6fd54fe0eba3f0bf.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>如你所见，这次 arm CPU 上也没有看到未初始化的值了。</p> <p><strong>这里 a1 不需要设置成 final</strong>，因为前面我们说过，2 与 3 之间是有依赖的，可以把他们看成一个整体，只需要整体后面添加好内存屏障即可。但是<strong>这个并不可靠</strong>！！！！因为在某些 JDK 中可能会把这个代码：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8cc76a476ba37e8fb7df603a4be46ab0.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>优化成这样：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8aa6f2898ff396205b52328cedbdfbd9.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>这样 a1, a2 之间就没有依赖了！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！<strong>所以最好还是所有的变量都设置为 final</strong></p> <p>但是，这在我们不能将字段设置为 final 的时候，就不好使了。</p> <h2 id="2-使用-volatile这是大家常用以及官方推荐的做法">2. 使用 volatile，这是大家常用以及官方推荐的做法</h2> <p>将 value 设置为 volatile 的，在我的另一系列文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/490465757"  target="_blank" rel="nofollow">全网最硬核 Java 新内存模型解析与实验</a>中，我们知道对于 volatile 写入，我们通过在写入之前加入 LoadStore + StoreStore 内存屏障，在写入之后加入 StoreLoad 内存屏障实现的，如果把 value 设置为 volatile 的，那么前面的伪代码就变成了：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6b0742078dfcb820e17a49499e605b2e.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>我们通过下面的代码测试下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bb4a7a4c00a5084ef74a600b9b6b17a7.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>依旧在 arm 机器上面测试，结果是：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9c00cef95e7b3846535d503fe83468f9.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>没有看到未初始化值了</p> <h2 id="3-对于-java-9-可以使用-varhandle-的-acquirerelease">3. 对于 Java 9+ 可以使用 Varhandle 的 acquire/release</h2> <p>前面分析，我们其实只需要保证在伪代码第五步之前保证有 StoreStore 内存屏障即可，所以 volatile 其实有点重，我们可以通过使用 Varhandle 的 acquire/release 这一级别的可见性 api 实现，这样伪代码就变成了：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9c7d5ef2ca3114a24f9d3e09d229ae40.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>我们的测试代码变成了：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/963d9e6967ceab3ab945f1683af9f64c.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>测试结果是：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6518259905eb6467ea707e3eb5ea5635.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>也是没有看到未初始化值了。这种方式是用内存屏障最少，同时不用限制目标类型里面不必使用 final 字段的方式。</p> <h2 id="4-一种有趣但是没啥用的思路---如果是静态方法可以通过类加载器机制实现很简便的写法">4. 一种有趣但是没啥用的思路 - 如果是静态方法，可以通过类加载器机制实现很简便的写法</h2> <p>如果我们，ValueHolder 里面的方法以及字段可以是 static 的，例如：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/98fb8d09b2d67f34f7542052e1ba94bd.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"><br /> 将 ValueHolder 作为一个单独的类，或者一个内部类，这样也是能保证 Value 里面字段的可见性的，这是通过类加载器机制实现的，在加载同一个类的时候(类加载的过程中会初始化 static 字段并且运行 static 块代码)，是通过 synchronized 关键字同步块保护的，参考其中类加载器(ClassLoader.java)的源码：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/ClassLoader.java"  target="_blank" rel="nofollow"><code>ClassLoader.java</code></a><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9f5cbc06c3c941417960046dc09184ae.jpg" alt="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型"></p> <p>对于 syncrhonized 底层对应的 monitorenter 和 monitorexit，monitorenter 与 volatile 读有一样的内存屏障，即在操作之后加入 LoadLoad 和 LoadStore，monitorexit 与 volatile 写有一样的内存屏障，在操作之前加入 LoadStore + StoreStore 内存屏障，在操作之后加入 StoreLoad 内存屏障。所以，也是能保证可见性的。但是这样虽然写起来貌似很简便，效率上更加低（低了很多，类加载需要更多事情）并且不够灵活，只是作为一种扩展知识知道就好。</p> </h1> <ol> <li>DCL 是一种常见的编程模式，对于锁保护的字段 value 会有两种字段可见性问题：</li> <li>如果根据 Java 内存模型的定义，不考虑实际 JVM 的实现，那么 getValue 是有可能返回 null 的。但是这个一般都被现在 JVM 设计避免了，这一点我们在实际编程的时候可以不考虑。</li> <li>可能读取到没有初始化完成的 Value 的字段值，这个可以通过在构造器完成与赋值给变量之间添加 StoreStore 内存屏障解决。可以通过将 Value 的字段设置为 final 解决，但是不够灵活。</li> <li><strong>最简单的方式是将 value 字段设置为 volatile 的，这也是 JDK 中使用的方式，官方也推荐这种</strong>。</li> <li><strong>效率最高的方式是使用 VarHandle 的 release 模式</strong>，这个模式只会引入 StoreStore 与 LoadStore 内存屏障，相对于 volatile 写的内存屏障要少很多（少了 StoreLoad，对于 x86 相当于没有内存屏障，因为 x86 天然有 LoadLoad，LoadStore，StoreStore，x86 仅仅不能天然保证 StoreLoad）</li> </ol> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-101344.htm">我们如何从MySQL中的给定日期获取日期和月份？</a></p>
                                        <p>下一个：<a href="/news/article-102135.htm">怎样做宠物零食（如何制作宠物零食）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-71482.htm" title="58同城免费领养小猫结果人家说打错了（58同城宠物猫免费领养）">58同城免费领养小猫结果人家说打错了（58同城宠物猫免费领养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-13-clash-v2ray-ss-ssr.htm" title="VPN推荐 | 4月13日18M/S|免费Clash/Shadowrocket/V2ray/SSR免费节点地址">VPN推荐 | 4月13日18M/S|免费Clash/Shadowrocket/V2ray/SSR免费节点地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-clash-v2ray-ss-ssr.htm" title="VPN推荐 | 3月7日21.5M/S|免费Shadowrocket/SSR/Clash/V2ray免费节点地址">VPN推荐 | 3月7日21.5M/S|免费Shadowrocket/SSR/Clash/V2ray免费节点地址</a></li>
                        <li class="py-2"><a href="/news/article-98433.htm" title="动物疫苗分为几类 动物疫苗分为几类类型">动物疫苗分为几类 动物疫苗分为几类类型</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-8-free-subscribe-node.htm" title="VPN推荐 | 3月8日20.7M/S|免费SSR/V2ray/Clash/Shadowrocket免费节点地址">VPN推荐 | 3月8日20.7M/S|免费SSR/V2ray/Clash/Shadowrocket免费节点地址</a></li>
                        <li class="py-2"><a href="/news/article-77515.htm" title="宠物店的利润怎么样（宠物店一年的纯利润能挣多少）">宠物店的利润怎么样（宠物店一年的纯利润能挣多少）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-free-subscribe-node.htm" title="VPN推荐 | 3月29日18.5M/S|免费V2ray/SSR/Clash/Shadowrocket免费节点地址">VPN推荐 | 3月29日18.5M/S|免费V2ray/SSR/Clash/Shadowrocket免费节点地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-26-free-v2ray.htm" title="VPN推荐 | 3月26日20.3M/S|免费V2ray/Shadowrocket/SSR/Clash免费节点地址">VPN推荐 | 3月26日20.3M/S|免费V2ray/Shadowrocket/SSR/Clash免费节点地址</a></li>
                        <li class="py-2"><a href="/news/article-91781.htm" title="广州宠物救助中心电话24小时 广州宠物救助中心电话24小时服务">广州宠物救助中心电话24小时 广州宠物救助中心电话24小时服务</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-15-free-node-subscribe.htm" title="VPN推荐 | 4月15日21.9M/S|免费SSR/V2ray/Shadowrocket/Clash免费节点地址">VPN推荐 | 4月15日21.9M/S|免费SSR/V2ray/Shadowrocket/Clash免费节点地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">77</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- End About Us -->
        <!-- Footer Area -->
    <footer class="footer">
        <!-- Copyright -->
        <div class="copyright">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="copyright-content">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">VPN推荐 免费节点订阅中文网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Copyright -->
    </footer>
    <!-- End Footer Area -->
    <!-- Jquery JS -->
    <script src="/assets/website/js/frontend/clashxray/jquery.min.js"></script>
    <!-- Bootstrap Js -->
    <script src="/assets/website/js/frontend/clashxray/bootstrap.min.js"></script>
    <!-- Slicknav Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.slicknav.min.js"></script>
    <!-- ScrollUp Js -->
    <script src="/assets/website/js/frontend/clashxray/jquery.scrollUp.min.js"></script>
    <!-- Carousel Js -->
    <script src="/assets/website/js/frontend/clashxray/owl.carousel.min.js"></script>
    <!-- Waypoints Js -->
    <script src="/assets/website/js/frontend/clashxray/waypoints.min.js"></script>
    <!--Counterup Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.counterup.min.js"></script>
    <!-- Stellar Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.stellar.min.js"></script>
    <!-- Min Js -->
    <script src="/assets/website/js/frontend/clashxray/wow.min.js"></script>
    <!-- Animate-Text Js -->
    <script src="/assets/website/js/frontend/clashxray/animate-text.js"></script>
    <!-- Easing Js -->
    <script src="/assets/website/js/frontend/clashxray/easing.min.js"></script>
    <!-- Magnific Js -->
    <script src="/assets/website/js/frontend/clashxray/jquery.magnific-popup.min.js"></script>
    <!-- Particales Js -->
    <script src="/assets/website/js/frontend/clashxray/particles.min.js"></script>
    <!-- Particales-Code Js -->
    <script src="/assets/website/js/frontend/clashxray/particle-code.js"></script>
    <!-- Main Js -->
    <script src="/assets/website/js/frontend/clashxray/main.js"></script>
    <!-- Custom Js -->
    <script src="/assets/website/js/frontend/clashxray/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>